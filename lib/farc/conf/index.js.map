{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/farc/conf/index.ts"],"names":[],"mappings":";;AAQa,QAAA,aAAa,GAAG,CAAC,CAAS,EAAmB,EAAE;IAC1D,MAAM,EAAE,GAAG,yBAAyB,CAAC;IACrC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IACD,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAC9B,IAAI,KAAK,EAAE;QACT,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjC,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE;YACxC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC;aAAM;YACL,KAAK,GAAG,IAAI,CAAC;SACd;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAYW,QAAA,cAAc,GAAG,CAAC,GAAQ,EAAO,EAAE;IAC9C,QAAQ,OAAO,GAAG,EAAE;QAClB,KAAK,QAAQ,CAAE;QACf,KAAK,QAAQ,CAAE;QACf,KAAK,SAAS;YACZ,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC;QACtB,KAAK,QAAQ;YACX,OAAO,GAAG,CAAC;QACb;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC,CAAC;AAUW,QAAA,cAAc,GAAG,CAAC,GAAQ,EAAO,EAAE;IAC9C,OAAO,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;AAC1D,CAAC,CAAC","sourcesContent":["/**\n * cron time string pruefen (hh:mm)\n *\n * liefert ein string[] | null (ungueltiger string)\n * -> [1] = \"hh\", [2] = \"mm\"\n *\n * @param c - Benutzereingabe\n */\nexport const checkCronTime = (c: string): string[] | null => {\n  const re = /^(\\d?\\d{1}):(\\d?\\d{1})$/;\n  if (typeof c !== \"string\") {\n    return null;\n  }\n  let match = re.exec(c.trim());\n  if (match) {\n    const h = parseInt(match[1], 10);\n    const m = parseInt(match[2], 10);\n    if (h >= 0 && h < 24 && m >= 0 && m < 60) {\n      match[1] = (\"0\" + match[1]).slice(-2);\n      match[2] = (\"0\" + match[2]).slice(-2);\n    } else {\n      match = null;\n    }\n  }\n  return match;\n};\n\n/**\n * Wert fuers Speichern in der Config aufbereiten\n *\n * string, boolean, number werden als Object gespeichert: {_val_: value}\n * object wird unveaendert uebernommen\n * null -> Datensatz loeschen\n * undefined -> keine Aktion\n *\n * @param val\n */\nexport const setConfigValue = (val: any): any => {\n  switch (typeof val) {\n    case \"string\" :\n    case \"number\" :\n    case \"boolean\":\n      return {_val_: val};\n    case \"object\" :  // auch null!\n      return val;\n    default:\n      return undefined;\n  }\n};\n\n/**\n * Wert aus der Config zurueckgeben (s.o.)\n *\n * Einzelne string, number oder boolean werden als Einzelwerte geliefert,\n * der Rest wird unveraendeert zurueckgegeben.\n *\n * @param val\n */\nexport const getConfigValue = (val: any): any => {\n  return val && val._val_ !== undefined ? val._val_ : val;\n};\n"]}